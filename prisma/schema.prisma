// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  pending
  completed
  cancelled
  refunded
}

// Add Product model
model Product {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  price       Int      // Price in cents (integer)
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orderItems  OrderItem[]
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  password          String?
  emailVerified     DateTime?   
  verified          Boolean   @default(false)
  verificationToken String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @default(now())
  image             String?
  accounts          Account[]
  sessions          Session[]
  orders            Order[]   
}

model Order {
  id         String      @id @default(cuid())
  userId     String?
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  guestEmail String?
  status     OrderStatus
  total      Float
  orderItems OrderItem[]
  metadata   Json?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([metadata], map: "stripe_session_idx")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String   // Foreign key to Product
  quantity  Int
  price     Float    // Price at time of purchase (in dollars)

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}